cmake_minimum_required(VERSION 3.5)
project(HorseIR)

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g")
set(CMAKE_EXPORT_COMPILE_COMMANDS "ON")

set(ANTLR4CPP_JAR_LOCATION "${PROJECT_SOURCE_DIR}/jar/antlr-4.7-complete.jar")

list(APPEND CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/cmake")
find_package(ANTLR4CPP)
if (NOT ANTLR4CPP_FOUND)
    message(FATAL_ERROR "require antlr4-cpp-runtime")
endif ()
include_directories(${ANTLR4CPP_INCLUDE_DIRS})

include(BuildHorseIRGrammar)

file(GLOB DIR_AST_HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/ast/*.h)
foreach (header ${DIR_AST_HEADERS})
    file(COPY ${header} DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/include/ast)
endforeach (header)
file(GLOB DIR_AST_TYPE_HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/ast/type/*.h)
foreach (header ${DIR_AST_TYPE_HEADERS})
    file(COPY ${header} DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/include/ast/type)
endforeach (header)
file(GLOB DIR_AST_OPERAND_HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/ast/operand/*.h)
foreach (header ${DIR_AST_OPERAND_HEADERS})
    file(COPY ${header} DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/include/ast/operand)
endforeach (header)
file(GLOB DIR_AST_STATEMENT_HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/ast/statement/*.h)
foreach (header ${DIR_AST_STATEMENT_HEADERS})
    file(COPY ${header} DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/include/ast/statement)
endforeach (header)
file(GLOB DIR_MISC_HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/misc/*.h)
foreach (header ${DIR_MISC_HEADERS})
    file(COPY ${header} DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/include/misc)
endforeach (header)
file(GLOB DIR_INTERPRETER_HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/interpreter/*.h)
foreach (header ${DIR_INTERPRETER_HEADERS})
    file(COPY ${header} DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/include/interpreter)
endforeach (header)
file(GLOB DIR_ANALYSIS_HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/analysis/*.h)
foreach (header ${DIR_ANALYSIS_HEADERS})
    file(COPY ${header} DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/include/analysis)
endforeach (header)

# == debug ==
list(APPEND HorseIRDebug_SRC ${CMAKE_SOURCE_DIR}/Debug.cc)
list(APPEND HorseIRDebug_SRC ${DIR_AST_HEADERS})
list(APPEND HorseIRDebug_SRC ${DIR_AST_TYPE_HEADERS})
list(APPEND HorseIRDebug_SRC ${DIR_AST_OPERAND_HEADERS})
list(APPEND HorseIRDebug_SRC ${DIR_AST_STATEMENT_HEADERS})
list(APPEND HorseIRDebug_SRC ${CMAKE_SOURCE_DIR}/ast/ASTPrinter.cc)
list(APPEND HorseIRDebug_SRC ${CMAKE_SOURCE_DIR}/ast/CSTConverter.cc)
list(APPEND HorseIRDebug_SRC ${CMAKE_SOURCE_DIR}/ast/type/TypeUtils.cc)
list(APPEND HorseIRDebug_SRC ${CMAKE_SOURCE_DIR}/analysis/CallGraph.cc)
list(APPEND HorseIRDebug_SRC ${CMAKE_SOURCE_DIR}/analysis/ControlFlowGraph.cc)
list(APPEND HorseIRDebug_SRC ${CMAKE_SOURCE_DIR}/interpreter/StatementFlow.cc)
list(APPEND HorseIRDebug_SRC ${CMAKE_SOURCE_DIR}/interpreter/LiteralConverter.cc)
list(APPEND HorseIRDebug_SRC ${CMAKE_SOURCE_DIR}/interpreter/Interpreter.cc)
list(APPEND HorseIRDebug_SRC ${CMAKE_SOURCE_DIR}/interpreter/Dispatcher.cc)
list(APPEND HorseIRDebug_SRC ${DIR_MISC_HEADERS})
list(APPEND HorseIRDebug_SRC ${DIR_INTERPRETER_HEADERS})
list(APPEND HorseIRDebug_SRC ${DIR_ANALYSIS_HEADERS})
list(APPEND HorseIRDebug_SRC ${ANTLR4_horseIR_SOURCE})
add_executable(HorseIRDebug ${HorseIRDebug_SRC})
target_link_libraries(HorseIRDebug ${ANTLR4CPP_LIBRARIES})
target_link_libraries(HorseIRDebug ${CMAKE_SOURCE_DIR}/../backend/libBackend.a)
target_link_libraries(HorseIRDebug pcre2-8)
/*
* Please provide your grammar with EBNF notations.
* Keep this file updated with MIR.g4.
 x*/

mir_program      ::= { module | content }*
module           ::= "module" name "{" { method }* "}"
content          ::= method
                   | global_var
                   | import_module
method           ::= "def" name parameter_list type "{" statement_list "}"
parameter_list   ::= "(" [ name type { "," name type }* ] ")"
global_var       ::= "def" name type ";"
import_module    ::= "import" compound_name ";"
                   | "import" import_compound_name ";"
/* main */
statement_list    ::= { statement ";" }*
statement         ::= statement_core
                    | "[" label "]"
statement_core    ::= name type assign expression
                    | "return" (name | compound_name | literal)
                    | "goto" label [(name | compound_name | literal_bool)]
expression        ::= [ type_cast ] sub_expression
                    | "checktype" "(" sub_expression "," type_literal ")"
                    | "checkcast" "(" sub_expression "," type_literal ")"
type_cast         ::= "(" type_literal ")"
sub_expression    ::= method_call
                    | operand
operand           ::= compound_name
                    | name
                    | literal

method_call       ::= compound_name argument_list
                    | literal_function argument_list
argument_list     ::= "(" [operand { "," operand }*] ")"

literal           ::= literal_nil        type
                    | literal_bool       type_bool
                    | literal_char       type_char
                    | literal_int        type_int
                    | literal_float      type_float
                    | literal_complex    type_complex 
                    | literal_symbol    [type_symbol]
                    | literal_time       type_time
                    | literal_function  [type_func]
                    | literal_list      [type_list]
                    | literal_dict      [type_dict]
                    | literal_table     [type_table]
                    | literal_ktable    [type_ktable]

type              ::= ":" type_literal
type_literal      ::= scalar_type
                    | compound_type
                    | unknown_type
scalar_type       ::= type_bool
                    | type_char
                    | type_int
                    | type_float
                    | type_complex
                    | type_sym
                    | type_time
compound_type     ::= type_list
                    | type_dict
                    | type_enum
                    | type_table
                    | type_ktable
unknown_type      ::= "?"

type_bool         ::= "bool"
type_char         ::= "char"
type_int          ::= "i8" | "i16" | "i32" | "i64"
type_float        ::= "f32" | "f64"
type_complex      ::= "complex"
type_sym          ::= "sym"
type_time         ::= "m" | "d" | "z" | "u" | "v" | "t"
type_list         ::= "list" "<" type_literal ">"
type_dict         ::= "dict" "<" type_literal, type_literal ">"
type_enum         ::= "enum" "<" type_literal ">"
type_table        ::= "table"
type_ktable       ::= "ktable"

name                 ::= id
import_compound_name ::= name {"." name}* "." "*"
compound_name        ::= name {"." name}+
type_name            ::= name
label                ::= name
assign               ::= "="
literal_nil          ::= "nil"


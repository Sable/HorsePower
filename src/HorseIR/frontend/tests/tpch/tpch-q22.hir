module default{
    import Builtin.*;
    def sub2() : f64{
        a0:table = @load_table(`customer);
        t0:f64   = check_cast(@column_value(a0, `c_acctbal), f64);
        t1:str   = check_cast(@column_value(a0, `c_phone)  , str);

        w0:bool  = @gt(t0, 0:f64);
        w1:str   = @sub_string(t1, (1,2):i64);
        c0:str   = ("13", "31", "23", "29", "30", "18", "17"):str;
        w2:bool  = @member(c0, w1);
        w3:bool  = @and(w0, w2);
        w4:f64   = @compress(w3, t0);
        w5:f64   = @avg(w4);
        return w5;
    }
    def sub1() : table {
        a0:table = @load_table(`customer);
        a1:table = @load_table(`orders);
        t0:f64   = check_cast(@column_value(a0, `c_acctbal), f64);
        t1:str   = check_cast(@column_value(a0, `c_phone)  , str);

        w0:str   = @sub_string(t1, (1,2):i64);
        c0:str   = ("13", "31", "23", "29", "30", "18", "17"):str;
        w1:bool  = @member(c0, w0);
        sub2:f64 = @sub2();
        w2:bool  = @gt(t0, sub2);
        w3:bool  = @and(w1, w2);

        t2:enum<?> = check_cast(@column_value(a1, `o_custkey)  , enum<?>); // fkey
        w4:i64   = @values(t2);
        w5:i64   = @index_assign(w3, w4, 0:bool);

        m0:str   = @compress(w3, w0);
        m1:f64   = @compress(w3, t0);

        z0:sym   = (`cntrycode, `c_acctbal):sym;
        z1:list<?> = @list(m0, m1);
        z:table  = @table(z0, z1);
        return z;
    }
    def main() : table {
        // step 0: load table
        sub1:table = @sub1();
        t0:str     = check_cast(@column_value(sub1, `cntrycode), str);
        t1:f64     = check_cast(@column_value(sub1, `c_acctbal), f64);

        w0:dict<i64,list<i64>> = @group(t0);
        w1:list<i64>  = @values(w0);
        w2:i64        = @keys(w0);
        w3:list<i64>  = @each(w1, @len:func<...:?>);
        w4:list<i64>  = @each_right(t1, w1, @index:func<...:?>);
        w5:list<i64>  = @each(w4, @sum:func<...:?>);

        m0:str        = @index(t0, w2);
        m1:i64        = @raze(w3);
        m2:i64        = @raze(w5);

        z0:sym        = (`cntrycode, `numcust, `totacctbal):sym;
        z1:list<?>    = @list(m0, m1, m2);
        z:table       = @table(z0, z1);
        return z;
   }
}
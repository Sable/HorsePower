module default{
    import Builtin.*;
    def simulateQ18_sub() : i64 {
        a0:table     = @load_table(`lineitem);
        t0:i64       = check_cast(@column_value(a0, `l_orderkey)  , i64);
        t1:f64       = check_cast(@column_value(a0, `l_quantity)  , f64);
        f0:i64       = @fetch(t0);
        w0:dict<i64, list<i64>> = @group(f0);
        w1:list<i64> = @values(w0);
        w2:i64       = @keys(w0);
        w3:list<f64> = @each_right(t1, w1, @index:func<...:?>);
        w4:list<f64> = @each(w3, @sum:func<...:?>);
        w5:f64       = @raze(w4);
        w6:bool      = @gt(w5, 300:f64);
        w7:i64       = @compress(w6, w2);
        return w7;
    }
    def main() : table{
        // step 0: load table
        a0:table = @load_table(`customer);
        a1:table = @load_table(`orders);
        a2:table = @load_table(`lineitem);
        t0:i64   = check_cast(@column_value(a1, `o_orderkey)  , i64);
        sub:i64  = @simulateQ18_sub();
        w0:bool  = @member(sub, t0);

        t1:enum<i64> = check_cast(@column_value(a2, `l_orderkey)  , enum<i64>);
        w1:i64   = @values(t1);
        w2:i64   = @keys(t1);
        w3:bool  = @index(w0, w1);
        w5:i64   = @compress(w3, w1);

        t2:enum<i64> = check_cast(@column_value(a1, `o_custkey)  , enum<i64>);
        w6:i64   = @values(t2);
        w7:i64   = @keys(t2);
        w8:i64   = @index(w6, w5);
        w9:i64   = @index(w7, w8);

        t3:sym  = check_cast(@column_value(a0, `c_name)      , sym);
        t4:d    = check_cast(@column_value(a1, `o_orderdate) , d);
        t5:f64  = check_cast(@column_value(a1, `o_totalprice), f64);
        w10:i64 = @index(w2, w5);
        w11:sym = @index(t3, w8);
        w12:d   = @index(t4, w5);
        w13:f64 = @index(t5, w5);

        d0:list<?>     = @list(w11, w9, w10, w12, w13);
        d1:dict<i64, list<i64>> = @group(d0);
        d2:list<i64>   = @values(d1);
        d3:i64         = @keys(d1);
        t6:f64         = check_cast(@column_value(a2, `l_quantity), f64);
        d4:f64         = @compress(w3, t6);
        d5:list<f64>   = @each_right(d4, d2, @index:func<...:?>);
        d6:list<f64>   = @each(d5, @sum:func<...:?>);
        d7:f64         = @raze(d6);
        d8:f64         = @index(w13, d3);
        d9:d           = @index(w12, d3);
        d10:i64        = @index(w10, d3);
        d11:i64        = @index(w9 , d3);
        d12:sym        = @index(w11, d3);

        g0:list<?> = @list(d8, d9);
        g1:i64     = @order(g0, (0,1):bool);

        m0:sym = @index(d12, g1);
        m1:i64 = @index(d11, g1);
        m2:i64 = @index(d10, g1);
        m3:d   = @index(d9 , g1);
        m4:f64 = @index(d8 , g1);
        m5:f64 = @index(d7 , g1);

        // materialization
        z0:sym     = (`c_name, `c_custkey, `o_orderkey, `o_orderdate, `o_totalprice, `sum):sym;
        z1:list<?> = @list(m0, m1, m2, m3, m4, m5);
        z:table    = @table(z0,z1);
        return z;
   }
}
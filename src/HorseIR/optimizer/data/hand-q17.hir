module default{
  import Builtin.*;
  def main() : table{
      a0:? = @load_table(`lineitem:sym);
      a1:? = @load_table(`part:sym);
      // lineitem
      c00:? = check_cast(@column_value(a0, `l_partkey:sym      ), i64);
      c01:? = check_cast(@column_value(a0, `l_quantity:sym     ), f64);
      c02:? = check_cast(@column_value(a0, `l_extendedprice:sym), f64);
      // part
      c10:? = check_cast(@column_value(a1, `p_partkey:sym      ), i64);
      c11:? = check_cast(@column_value(a1, `p_brand:sym        ), str);
      c12:? = check_cast(@column_value(a1, `p_container:sym    ), str);
      // 0. partkey: p_ and l_
      t0_0:? = @eq(c11, `"Brand#23":sym);
      t0_1:? = @eq(c12, `"MED BOX":sym);
      t0_2:? = @and(t0_0, t0_1);
      t0_3:? = @compress(t0_2, c10); // p_partkey
      t0_4:? = @join_index(@eq, t0_3, c00);
      t0_5:? = @index(t0_4, 0:i64);
      t0_6:? = @index(t0_4, 1:i64); // size: 6088
      t0_7:? = @index(t0_3, t0_5);  // p_partkey
      t0_8:? = @index(c01 , t0_6);  // l_quantity
      t0_9:? = @index(c02 , t0_6);  // l_extendedprice
      //xx:? = @sum(t0_5);
      // 1. magic box (groupby p_partkey)
      t1_0:? = @group(t0_7);
      t1_1:? = @keys(t1_0);
      t1_2:? = @values(t1_0);
      t1_3:? = @index(t0_7, t1_1);  // l_partkey
      t1_4:? = @each(@len, t1_2);
      t1_5:? = @raze(t1_4);         // total number in cells
      // 2. groupjoin (source: 1 magic box)
      t2_0:? = @join_index(@eq, t1_3, c00);
      t2_1:? = @index(t2_0, 0:i64);
      t2_2:? = @index(t2_0, 1:i64);
      // TODO: group right hand side ???
      // 2.1 group
      t5_0:? = @group(t2_1);
      t5_1:? = @keys(t5_0);
      t5_2:? = @values(t5_0);
      t5_3:? = @index(t2_1, t5_1);
      t5_4:? = @index(t1_5, t5_3); // cell info on left
      t5_5:? = @each_right(@index,t2_2,t5_2);
      t5_6:? = @index(t1_3, t5_3); // left: l_partkey (v53)
      // 
      t6_0:? = @each_right(@index, c01, t5_5);
      t6_1:? = @each(@sum, t6_0);
      t6_2:? = @raze(t6_1);
      t6_3:? = @mul(t5_4, t6_2);   // op: sum
      t6_4:? = @each(@len, t5_5);
      t6_5:? = @raze(t6_4);
      t6_6:? = @mul(t5_4, t6_5);   // op: count
      t6_7:? = @div(t6_3, t6_6);
      t6_8:? = @mul(t6_7, 0.2:f64);// map: v57
      //t2_k:? = @index(t1_5, t5_3);
      //t2_4:? = @index(c01, t2_2);  // rightExpressions: "l_quantity2"
      //t2_5:? = @mul(t2_4, t2_k);   // source: 1, op: "sum"
      //t2_6:? = @len(t2_4);
      //t2_7:? = @mul(t2_6, t2_k);   // source: 1, op: "count"
      //t2_8:? = @div(t2_5, t2_7);   // source: 1, op: "avg"
      //t2_9:? = @mul(t2_8, 0.2:f64);// map: v57
      // 3.1 join: l_quantity < v57
      // 3.2 join: p_partkey  < v53
      t3_0:? = @list(t0_8, t0_7);
      t3_1:? = @list(t6_8, t5_6);
      //t3_1:? = @list(t2_9, t5_6);
      t3_2:? = @join_index(@lt@eq, t3_0, t3_1);
      t3_3:? = @index(t3_2, 0:i64);
      t3_4:? = @index(t3_2, 1:i64);
      t3_5:? = @index(t0_9, t3_3);  // l_extendedprice
      t3_6:? = @sum(t3_5);
      t3_7:? = @div(t3_6, 7:i64);
      // result
      w0:? = `avg_yearly:sym;
      w1:? = @list(t3_7);
      w2:? = @table(w0,w1);
      return w2;
  }
}

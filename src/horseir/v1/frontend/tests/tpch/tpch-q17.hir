module default{
    import Builtin.*;
    def main() : table{
        // step 0: load table
        a0:table  = @load_table(`lineitem);
        a1:table  = @load_table(`part);
        t0:i64    = check_cast(@column_value(a0, `l_partkey), i64);
        t1:i64    = check_cast(@column_value(a1, `p_partkey), i64);
        t2:sym    = check_cast(@column_value(a1, `p_brand), sym);
        t3:sym    = check_cast(@column_value(a1, `p_container), sym);

        w0:bool   = @eq(t2, `"Brand#23");
        w1:bool   = @eq(t3, `"MED BOX");
        w2:bool   = @and(w0, w1);

        w3:i64    = @compress(w2, t1);
        w4:bool   = @member(w3, t0);
        t4:f64    = check_cast(@column_value(a0, `l_quantity), f64);
        w6:f64    = @compress(w4, t4);

        // sub query
        f0:i64    = @compress(w4, t0);
        f1:dict<i64, list<i64>> = @group(f0);
        f2:i64        = @keys(f1);
        f3:i64        = @index(f0, f2);
        f4:i64        = @index_of(f3, f0);
        f5:list<i64>  = @values(f1);
        f12:list<f64> = @each_right(w6, f5, @index:func<...:?>);
        f6:f64        = @each(f12, @avg:func<...:?>);
        f7:f64        = @raze(f6);
        f8:f64        = @mul(f7, 0.2:f64);
        f9:f64        = @index(f8, f4);
        f10:bool      = @lt(w6, f9);

        t5:f64    = check_cast(@column_value(a0, `l_extendedprice), f64);
        w13:f64   = @compress(w4, t5);
        w15:f64   = @compress(f10, w13);

        p0:f64    = @sum(w15);
        p1:f64    = @div(p0, 7:f64);

        z0:str     = `avg_yearly;
        z1:list<?> = @enlist(p1);
        z:table    = @table(z0, z1);
        return z;
   }
}